<?xml version="1.0"?>
<!--

    Copyright 2016-2023 The OpenZipkin Authors

    Licensed under the Apache License, Version 2.0 (the "License"); you may not use this file except
    in compliance with the License. You may obtain a copy of the License at

    http://www.apache.org/licenses/LICENSE-2.0

    Unless required by applicable law or agreed to in writing, software distributed under the License
    is distributed on an "AS IS" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express
    or implied. See the License for the specific language governing permissions and limitations under
    the License.

-->
<project xmlns="http://maven.apache.org/POM/4.0.0" xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance" xsi:schemaLocation="http://maven.apache.org/POM/4.0.0 http://maven.apache.org/xsd/maven-4.0.0.xsd">
  <parent>
    <groupId>io.zipkin.reporter2</groupId>
    <artifactId>zipkin-reporter-parent</artifactId>
    <version>2.16.5-SNAPSHOT</version>
  </parent>
  <modelVersion>4.0.0</modelVersion>

  <artifactId>zipkin-reporter-brave-otlp</artifactId>
  <name>OTLP Brave Reporter</name>
  <description>Adapts a OTLP Reporter to a Brave SpanHandler</description>

  <properties>
    <!-- Matches Export-Package in bnd.bnd -->
    <module.name>zipkin2.reporter.otlp</module.name>

    <main.basedir>${project.basedir}/..</main.basedir>

    <errorprone.args>-XepExcludedPaths:.*/target/.*</errorprone.args>

    <build-helper-maven-plugin.version>3.4.0</build-helper-maven-plugin.version>
    <exec-maven-plugin.version>3.1.0</exec-maven-plugin.version>
    <maven-antrun-plugin.version>3.1.0</maven-antrun-plugin.version>
    <protoc.version>24.1</protoc.version>
    <otlp-proto.version>1.0.0</otlp-proto.version>
    <os-maven-plugin.version>1.7.1</os-maven-plugin.version>
    <grpc.version>1.57.2</grpc.version>
    <protoc-gen-grpc-java.version>${grpc.version}</protoc-gen-grpc-java.version>
    <javax.annotation-api.version>1.3.2</javax.annotation-api.version>
    <ant-contrib.version>1.0b3</ant-contrib.version>
    <awaitility.version>4.2.0</awaitility.version>
  </properties>

  <dependencies>
    <dependency>
      <groupId>${project.groupId}</groupId>
      <artifactId>zipkin-reporter</artifactId>
      <version>${project.version}</version>
    </dependency>
    <dependency>
      <groupId>io.zipkin.brave</groupId>
      <artifactId>brave</artifactId>
      <version>${brave.version}</version>
      <exclusions>
        <exclusion>
          <groupId>*</groupId>
          <artifactId>*</artifactId>
        </exclusion>
      </exclusions>
      <!-- Don't pin Brave -->
      <scope>provided</scope>
    </dependency>

    <dependency>
      <groupId>io.grpc</groupId>
      <artifactId>grpc-protobuf</artifactId>
      <version>${grpc.version}</version>
      <scope>compile</scope>
    </dependency>
    <dependency>
      <groupId>io.grpc</groupId>
      <artifactId>grpc-stub</artifactId>
      <version>${grpc.version}</version>
      <scope>compile</scope>
    </dependency>
    <dependency>
      <groupId>javax.annotation</groupId>
      <artifactId>javax.annotation-api</artifactId>
      <version>${javax.annotation-api.version}</version>
      <scope>compile</scope>
    </dependency>

    <dependency>
      <groupId>io.grpc</groupId>
      <artifactId>grpc-netty-shaded</artifactId>
      <version>${grpc.version}</version>
      <scope>test</scope>
    </dependency>
    <dependency>
      <groupId>org.testcontainers</groupId>
      <artifactId>testcontainers</artifactId>
      <version>${testcontainers.version}</version>
      <scope>test</scope>
    </dependency>
    <dependency>
      <groupId>org.testcontainers</groupId>
      <artifactId>junit-jupiter</artifactId>
      <version>${testcontainers.version}</version>
      <scope>test</scope>
    </dependency>
    <dependency>
      <groupId>org.awaitility</groupId>
      <artifactId>awaitility</artifactId>
      <version>${awaitility.version}</version>
      <scope>test</scope>
    </dependency>
    <dependency>
      <groupId>com.squareup.okhttp3</groupId>
      <artifactId>okhttp</artifactId>
      <version>${okhttp.version}</version>
      <scope>test</scope>
    </dependency>
  </dependencies>

  <build>
    <extensions>
      <extension>
        <groupId>kr.motd.maven</groupId>
        <artifactId>os-maven-plugin</artifactId>
        <version>${os-maven-plugin.version}</version>
      </extension>
    </extensions>
    <plugins>
      <plugin>
        <groupId>org.codehaus.mojo</groupId>
        <artifactId>build-helper-maven-plugin</artifactId>
        <version>${build-helper-maven-plugin.version}</version>
        <executions>
          <execution>
            <phase>generate-sources</phase>
            <id>add-source</id>
            <goals>
              <goal>add-source</goal>
            </goals>
            <configuration>
              <sources>
                <source>${project.build.directory}/generated-sources/java/</source>
              </sources>
            </configuration>
          </execution>
        </executions>
      </plugin>

      <plugin>
        <groupId>org.apache.maven.plugins</groupId>
        <artifactId>maven-dependency-plugin</artifactId>
        <version>${maven-dependency-plugin.version}</version>
        <executions>
          <execution>
            <id>copy</id>
            <phase>generate-sources</phase>
            <goals>
              <goal>copy</goal>
            </goals>
            <configuration>
              <artifactItems>
                <!-- Plugin required to generate GRPC services -->
                <artifactItem>
                  <groupId>io.grpc</groupId>
                  <artifactId>protoc-gen-grpc-java</artifactId>
                  <version>${protoc-gen-grpc-java.version}</version>
                  <type>exe</type>
                  <classifier>${os.detected.classifier}</classifier>
                </artifactItem>
              </artifactItems>
              <outputDirectory>${project.build.directory}/grpc-java-plugin/</outputDirectory>
            </configuration>
          </execution>
        </executions>
      </plugin>
      <plugin>
        <groupId>org.apache.maven.plugins</groupId>
        <artifactId>maven-antrun-plugin</artifactId>
        <version>${maven-antrun-plugin.version}</version>
        <dependencies>
          <!-- Required for ant conditionals if/else -->
          <dependency>
            <groupId>ant-contrib</groupId>
            <artifactId>ant-contrib</artifactId>
            <version>${ant-contrib.version}</version>
            <exclusions>
              <exclusion>
                <groupId>ant</groupId>
                <artifactId>ant</artifactId>
              </exclusion>
            </exclusions>
          </dependency>
        </dependencies>
        <executions>
          <execution>
            <id>download-protoc</id>
            <phase>generate-sources</phase>
            <goals>
              <goal>run</goal>
            </goals>
            <configuration>
              <target>
                <taskdef resource="net/sf/antcontrib/antcontrib.properties" />
                <if>
                  <available file="${project.build.directory}/protoc/"/>
                  <then>
                    <echo>Files already downloaded, won't do anything</echo>
                  </then>
                  <else>
                    <echo message="Downloads protoc zip, unzips it and makes it executable"/>
                    <mkdir dir="${project.build.directory}/protoc"/>
                    <echo message="Download protoc"/>
                    <get
                      src="https://github.com/protocolbuffers/protobuf/releases/download/v${protoc.version}/protoc-${protoc.version}-${os.detected.classifier}.zip"
                      dest="${project.build.directory}/protoc/"/>
                    <echo message="Unzipping file"/>
                    <unzip
                      src="${project.build.directory}/protoc/protoc-${protoc.version}-${os.detected.classifier}.zip"
                      dest="${project.build.directory}/protoc/"/>
                    <echo message="Making protoc related files executable"/>
                    <chmod perm="777">
                      <fileset dir="${project.build.directory}/protoc/"/>
                    </chmod>
                    <echo message="Making grpc related files executable"/>
                    <chmod perm="777">
                      <fileset dir="${project.build.directory}/grpc-java-plugin/"/>
                    </chmod>
                  </else>
                </if>
              </target>
            </configuration>
          </execution>
          <execution>
            <id>download-otlp</id>
            <phase>generate-sources</phase>
            <goals>
              <goal>run</goal>
            </goals>
            <configuration>
              <target>
                <taskdef resource="net/sf/antcontrib/antcontrib.properties" />
                <if>
                  <available file="${project.build.directory}/generated-sources/java/io/"/>
                  <then>
                    <echo>Files already generated, won't do anything</echo>
                  </then>
                  <else>
                    <echo message="Downloads otlp proto sources, unzips them, creates output directories for source generation"/>
                    <mkdir dir="${project.build.directory}/otlp"/>
                    <echo message="Download otlp proto"/>
                    <get
                      src="https://github.com/open-telemetry/opentelemetry-proto/archive/refs/tags/v${otlp-proto.version}.zip"
                      dest="${project.build.directory}/otlp/"/>
                    <echo message="Unzipping file"/>
                    <unzip src="${project.build.directory}/otlp/v${otlp-proto.version}.zip"
                           dest="${project.build.directory}/otlp/"/>
                    <echo message="Creating output directory"/>
                    <mkdir dir="${project.build.directory}/generated-sources/java"/>
                  </else>
                </if>
              </target>
            </configuration>
          </execution>
        </executions>
      </plugin>
      <plugin>
        <groupId>org.codehaus.mojo</groupId>
        <artifactId>exec-maven-plugin</artifactId>
        <version>${exec-maven-plugin.version}</version>
        <!-- These steps will use protoc to generate sources from proto files -->
        <executions>
          <execution>
            <id>generate-otlp-proto-common-java</id>
            <phase>generate-sources</phase>
            <configuration>
              <executable>${project.build.directory}/protoc/bin/protoc</executable>
              <arguments>
                <argument>
                  -I=${project.build.directory}/otlp/opentelemetry-proto-${otlp-proto.version}/
                </argument>
                <argument>--java_out=${project.build.directory}/generated-sources/java
                </argument>
                <argument>
                  ${project.build.directory}/otlp/opentelemetry-proto-${otlp-proto.version}/opentelemetry/proto/common/v1/common.proto
                </argument>
              </arguments>
            </configuration>
            <goals>
              <goal>exec</goal>
            </goals>
          </execution>
          <execution>
            <id>generate-otlp-proto-resource-java</id>
            <phase>generate-sources</phase>
            <configuration>
              <executable>${project.build.directory}/protoc/bin/protoc</executable>
              <arguments>
                <argument>
                  -I=${project.build.directory}/otlp/opentelemetry-proto-${otlp-proto.version}/
                </argument>
                <argument>--java_out=${project.build.directory}/generated-sources/java
                </argument>
                <argument>
                  ${project.build.directory}/otlp/opentelemetry-proto-${otlp-proto.version}/opentelemetry/proto/resource/v1/resource.proto
                </argument>
              </arguments>
            </configuration>
            <goals>
              <goal>exec</goal>
            </goals>
          </execution>
          <execution>
            <id>generate-otlp-proto-collector-trace-java</id>
            <phase>generate-sources</phase>
            <configuration>
              <executable>${project.build.directory}/protoc/bin/protoc</executable>
              <arguments>
                <!-- This step uses the downloaded plugin to generate GRPC services -->
                <argument>
                  --plugin=protoc-gen-grpc-java=${project.build.directory}/grpc-java-plugin/protoc-gen-grpc-java-${protoc-gen-grpc-java.version}-${os.detected.classifier}.exe
                </argument>
                <argument>
                  -I=${project.build.directory}/otlp/opentelemetry-proto-${otlp-proto.version}/
                </argument>
                <argument>--grpc-java_out=${project.build.directory}/generated-sources/java
                </argument>
                <argument>--java_out=${project.build.directory}/generated-sources/java
                </argument>
                <argument>
                  ${project.build.directory}/otlp/opentelemetry-proto-${otlp-proto.version}/opentelemetry/proto/collector/trace/v1/trace_service.proto
                </argument>
              </arguments>
            </configuration>
            <goals>
              <goal>exec</goal>
            </goals>
          </execution>
          <execution>
            <id>generate-otlp-proto-trace-java</id>
            <phase>generate-sources</phase>
            <configuration>
              <executable>${project.build.directory}/protoc/bin/protoc</executable>
              <arguments>
                <argument>
                  -I=${project.build.directory}/otlp/opentelemetry-proto-${otlp-proto.version}/
                </argument>
                <argument>--java_out=${project.build.directory}/generated-sources/java
                </argument>
                <argument>
                  ${project.build.directory}/otlp/opentelemetry-proto-${otlp-proto.version}/opentelemetry/proto/trace/v1/trace.proto
                </argument>
              </arguments>
            </configuration>
            <goals>
              <goal>exec</goal>
            </goals>
          </execution>
        </executions>
      </plugin>
    </plugins>
  </build>
</project>
