<?xml version="1.0"?>
<!--

    Copyright 2016-2023 The OpenZipkin Authors

    Licensed under the Apache License, Version 2.0 (the "License"); you may not use this file except
    in compliance with the License. You may obtain a copy of the License at

    http://www.apache.org/licenses/LICENSE-2.0

    Unless required by applicable law or agreed to in writing, software distributed under the License
    is distributed on an "AS IS" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express
    or implied. See the License for the specific language governing permissions and limitations under
    the License.

-->
<project xmlns="http://maven.apache.org/POM/4.0.0"
         xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance"
         xsi:schemaLocation="http://maven.apache.org/POM/4.0.0 http://maven.apache.org/xsd/maven-4.0.0.xsd">
  <parent>
    <groupId>io.zipkin.reporter2</groupId>
    <artifactId>zipkin-reporter-parent</artifactId>
    <version>2.16.5-SNAPSHOT</version>
  </parent>
  <modelVersion>4.0.0</modelVersion>

  <artifactId>zipkin-reporter-brave</artifactId>
  <name>Zipkin Reporter Brave</name>
  <description>Adapts a Reporter to a Brave SpanHandler</description>

  <properties>
    <!-- Matches Export-Package in bnd.bnd -->
    <module.name>zipkin2.reporter.brave</module.name>

    <main.basedir>${project.basedir}/..</main.basedir>

    <!-- OTLP -->
    <build-helper-maven-plugin.version>3.4.0</build-helper-maven-plugin.version>
    <exec-maven-plugin.version>3.1.0</exec-maven-plugin.version>
    <maven-antrun-plugin.version>3.1.0</maven-antrun-plugin.version>

    <protoc.version>24.1</protoc.version>
    <protoc.architecture>linux-x86_64</protoc.architecture>

    <otlp-proto.version>1.0.0</otlp-proto.version>
    <protobuf.version>3.${protoc.version}</protobuf.version>
    <jsonpath.version>2.8.0</jsonpath.version>
    <os-maven-plugin.version>1.7.1</os-maven-plugin.version>
    <protoc-gen-grpc-java.version>1.57.2</protoc-gen-grpc-java.version>
    <grpc.version>1.57.2</grpc.version>
    <javax.annotation-api.version>1.3.2</javax.annotation-api.version>
  </properties>

  <dependencies>
    <dependency>
      <groupId>${project.groupId}</groupId>
      <artifactId>zipkin-reporter</artifactId>
      <version>${project.version}</version>
    </dependency>
    <dependency>
      <groupId>io.zipkin.brave</groupId>
      <artifactId>brave</artifactId>
      <version>${brave.version}</version>
      <exclusions>
        <exclusion>
          <groupId>*</groupId>
          <artifactId>*</artifactId>
        </exclusion>
      </exclusions>
      <!-- Don't pin Brave -->
      <scope>provided</scope>
    </dependency>

    <dependency>
      <groupId>io.zipkin.reporter2</groupId>
      <artifactId>zipkin-sender-okhttp3</artifactId>
      <version>${project.version}</version>
      <scope>test</scope>
    </dependency>
    <dependency>
      <groupId>io.zipkin.zipkin2</groupId>
      <artifactId>zipkin-junit</artifactId>
      <version>${zipkin.version}</version>
      <scope>test</scope>
    </dependency>

    <!-- OTLP -->
    <dependency>
      <groupId>com.google.protobuf</groupId>
      <artifactId>protobuf-java</artifactId>
      <version>${protobuf.version}</version>
      <scope>compile</scope>
    </dependency>
    <dependency>
      <groupId>com.google.protobuf</groupId>
      <artifactId>protobuf-java-util</artifactId>
      <version>${protobuf.version}</version>
      <scope>compile</scope>
    </dependency>
    <dependency>
      <groupId>io.grpc</groupId>
      <artifactId>grpc-protobuf</artifactId>
      <version>${grpc.version}</version>
      <scope>compile</scope>
    </dependency>
    <dependency>
      <groupId>io.grpc</groupId>
      <artifactId>grpc-stub</artifactId>
      <version>${grpc.version}</version>
      <scope>compile</scope>
    </dependency>
    <dependency>
      <groupId>javax.annotation</groupId>
      <artifactId>javax.annotation-api</artifactId>
      <version>${javax.annotation-api.version}</version>
      <scope>compile</scope>
    </dependency>
    <!-- Until OTLP fixes their stuff with proto -->
    <dependency>
      <groupId>com.jayway.jsonpath</groupId>
      <artifactId>json-path</artifactId>
      <version>${jsonpath.version}</version>
    </dependency>
    <dependency>
      <groupId>io.grpc</groupId>
      <artifactId>grpc-netty-shaded</artifactId>
      <version>${grpc.version}</version>
      <scope>test</scope>
    </dependency>
    <dependency>
      <groupId>org.testcontainers</groupId>
      <artifactId>testcontainers</artifactId>
      <version>${testcontainers.version}</version>
      <scope>test</scope>
    </dependency>
    <dependency>
      <groupId>org.testcontainers</groupId>
      <artifactId>junit-jupiter</artifactId>
      <version>${testcontainers.version}</version>
      <scope>test</scope>
    </dependency>
    <dependency>
      <groupId>org.awaitility</groupId>
      <artifactId>awaitility</artifactId>
      <version>${awaitility.version}</version>
      <scope>test</scope>
    </dependency>
  </dependencies>

  <build>
    <extensions>
      <extension>
        <groupId>kr.motd.maven</groupId>
        <artifactId>os-maven-plugin</artifactId>
        <version>${os-maven-plugin.version}</version>
      </extension>
    </extensions>
    <plugins>
      <!-- TODO: Add checks so files are not re-downloaded and unzipped -->
      <!-- TODO: Add checksum check -->

      <plugin>
        <groupId>org.apache.maven.plugins</groupId>
        <artifactId>maven-dependency-plugin</artifactId>
        <version>${maven-dependency-plugin.version}</version>
        <executions>
          <execution>
            <id>copy</id>
            <phase>generate-sources</phase>
            <goals>
              <goal>copy</goal>
            </goals>
            <configuration>
              <artifactItems>
                <artifactItem>
                  <groupId>io.grpc</groupId>
                  <artifactId>protoc-gen-grpc-java</artifactId>
                  <version>${protoc-gen-grpc-java.version}</version>
                  <type>exe</type>
                  <classifier>${os.detected.classifier}</classifier>
                </artifactItem>
              </artifactItems>
              <outputDirectory>${project.build.directory}/grpc-java-plugin/</outputDirectory>
            </configuration>
          </execution>
        </executions>
      </plugin>
      <plugin>
        <groupId>org.apache.maven.plugins</groupId>
        <artifactId>maven-antrun-plugin</artifactId>
        <version>${maven-antrun-plugin.version}</version>
        <executions>
          <execution>
            <id>download-protoc</id>
            <phase>generate-sources</phase>
            <goals>
              <goal>run</goal>
            </goals>
            <configuration>
              <target>
                <mkdir dir="${project.build.directory}/protoc"/>
                <echo message="Download protoc"/>
                <get
                  src="https://github.com/protocolbuffers/protobuf/releases/download/v${protoc.version}/protoc-${protoc.version}-${protoc.architecture}.zip"
                  dest="${project.build.directory}/protoc/"/>
                <echo message="Unzipping file"/>
                <unzip
                  src="${project.build.directory}/protoc/protoc-${protoc.version}-${protoc.architecture}.zip"
                  dest="${project.build.directory}/protoc/"/>
                <echo message="Making protoc related files executable"/>
                <chmod perm="777">
                  <fileset dir="${project.build.directory}/protoc/"/>
                </chmod>
                <echo message="Making grpc related files executable"/>
                <chmod perm="777">
                  <fileset dir="${project.build.directory}/grpc-java-plugin/"/>
                </chmod>
              </target>
            </configuration>
          </execution>
          <execution>
            <id>download-otlp</id>
            <phase>generate-sources</phase>
            <goals>
              <goal>run</goal>
            </goals>
            <configuration>
              <target>
                <mkdir dir="${project.build.directory}/otlp"/>
                <echo message="Download otlp proto"/>
                <get
                  src="https://github.com/open-telemetry/opentelemetry-proto/archive/refs/tags/v${otlp-proto.version}.zip"
                  dest="${project.build.directory}/otlp/"/>
                <echo message="Unzipping file"/>
                <unzip src="${project.build.directory}/otlp/v${otlp-proto.version}.zip"
                       dest="${project.build.directory}/otlp/"/>
                <echo message="Creating output directory"/>
                <mkdir dir="${project.build.directory}/generated-sources/java"/>
              </target>
            </configuration>
          </execution>
        </executions>
      </plugin>
      <plugin>
        <groupId>org.codehaus.mojo</groupId>
        <artifactId>exec-maven-plugin</artifactId>
        <version>${exec-maven-plugin.version}</version>
        <executions>
          <execution>
            <id>generate-otlp-proto-common-java</id>
            <phase>generate-sources</phase>
            <configuration>
              <executable>${project.build.directory}/protoc/bin/protoc</executable>
              <arguments>
                <argument>
                  -I=${project.build.directory}/otlp/opentelemetry-proto-${otlp-proto.version}/
                </argument>
                <argument>--java_out=${project.build.directory}/generated-sources/java
                </argument>
                <argument>
                  ${project.build.directory}/otlp/opentelemetry-proto-${otlp-proto.version}/opentelemetry/proto/common/v1/common.proto
                </argument>
              </arguments>
            </configuration>
            <goals>
              <goal>exec</goal>
            </goals>
          </execution>
          <execution>
            <id>generate-otlp-proto-resource-java</id>
            <phase>generate-sources</phase>
            <configuration>
              <executable>${project.build.directory}/protoc/bin/protoc</executable>
              <arguments>
                <argument>
                  -I=${project.build.directory}/otlp/opentelemetry-proto-${otlp-proto.version}/
                </argument>
                <argument>--java_out=${project.build.directory}/generated-sources/java
                </argument>
                <argument>
                  ${project.build.directory}/otlp/opentelemetry-proto-${otlp-proto.version}/opentelemetry/proto/resource/v1/resource.proto
                </argument>
              </arguments>
            </configuration>
            <goals>
              <goal>exec</goal>
            </goals>
          </execution>
          <execution>
            <id>generate-otlp-proto-collector-race-java</id>
            <phase>generate-sources</phase>
            <configuration>
              <executable>${project.build.directory}/protoc/bin/protoc</executable>
              <arguments>
                <argument>
                  --plugin=protoc-gen-grpc-java=${project.build.directory}/grpc-java-plugin/protoc-gen-grpc-java-${protoc-gen-grpc-java.version}-${os.detected.classifier}.exe
                </argument>
                <argument>
                  -I=${project.build.directory}/otlp/opentelemetry-proto-${otlp-proto.version}/
                </argument>
                <argument>--grpc-java_out=${project.build.directory}/generated-sources/java
                </argument>
                <argument>--java_out=${project.build.directory}/generated-sources/java
                </argument>
                <argument>
                  ${project.build.directory}/otlp/opentelemetry-proto-${otlp-proto.version}/opentelemetry/proto/collector/trace/v1/trace_service.proto
                </argument>
              </arguments>
            </configuration>
            <goals>
              <goal>exec</goal>
            </goals>
          </execution>
          <execution>
            <id>generate-otlp-proto-trace-java</id>
            <phase>generate-sources</phase>
            <configuration>
              <executable>${project.build.directory}/protoc/bin/protoc</executable>
              <arguments>
                <argument>
                  -I=${project.build.directory}/otlp/opentelemetry-proto-${otlp-proto.version}/
                </argument>
                <argument>--java_out=${project.build.directory}/generated-sources/java
                </argument>
                <argument>
                  ${project.build.directory}/otlp/opentelemetry-proto-${otlp-proto.version}/opentelemetry/proto/trace/v1/trace.proto
                </argument>
              </arguments>
            </configuration>
            <goals>
              <goal>exec</goal>
            </goals>
          </execution>
        </executions>
      </plugin>

      <!--<activation>
        <file>
          <missing>${basedir}/target/otlp/opentelemetry-proto-${otlp-proto.version}/gen/java/io/</missing>
        </file>
      </activation>-->
      <plugin>
        <groupId>org.codehaus.mojo</groupId>
        <artifactId>build-helper-maven-plugin</artifactId>
        <version>${build-helper-maven-plugin.version}</version>
        <executions>
          <execution>
            <phase>generate-sources</phase>
            <id>add-source</id>
            <goals>
              <goal>add-source</goal>
            </goals>
            <configuration>
              <sources>
                <source>${project.build.directory}/generated-sources/java/</source>
              </sources>
            </configuration>
          </execution>
        </executions>
      </plugin>
    </plugins>
  </build>
</project>
